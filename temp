<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flipbook with Zoom</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Poppins", sans-serif;
    }

    body {
      margin: 0;
      padding: 0;
      background: #f1c40f;
      overflow-x: hidden;
    }

    .flipbook-wrapper {
      position: relative;
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    .zoom-container {
      position: relative;
      transition: transform 0.3s ease;
      transform-origin: center center;
    }

    .flipbook {
      margin: 0 auto;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }

    /* Hard covers */
    .flipbook .hard {
      background-image: url("/images/inner.png") !important;
      color: #fff;
      font-weight: bold;
      border: none;
      position: relative;
    }

    .flipbook .hard #hare {
      position: absolute;
      top: 10%;
      left: 0;
      right: 0;
      text-align: center;
      z-index: 10;
    }

    .flipbook .hard .title1 {
      position: absolute;
      top: 20%;
      left: 0;
      right: 0;
      text-align: center;
      margin-bottom: 50px;
      z-index: 10;
    }

    .flipbook .hard #chapter {
      position: absolute;
      top: 35%;
      left: 50%;
      transform: translateX(-50%);
      z-index: 10;
      width: 150px;
      height: 45px;
      line-height: 45px;
      padding-top: 1.5px;
      text-align: center;
      margin-bottom: 15px;
      font-size: 25px;
      font-weight: bold;
      font-family: "Poppins", sans-serif;
      text-decoration: none;
      color: brown;
      border-radius: 12px;
      background: radial-gradient(
          ellipse farthest-corner at right bottom,
          #ffe38b 0%,
          #fff6c7 8%,
          #fff6c7 30%,
          #fff6c7 40%,
          transparent 80%
        ),
        radial-gradient(
          ellipse farthest-corner at left top,
          #ffffff 0%,
          #fff6c7 8%,
          #e8d293 25%,
          #fff6c7 62.5%,
          #fff6c7 100%
        );
    }

    .flipbook .hard .title2 {
      position: absolute;
      top: 45%;
      left: 0;
      right: 0;
      text-align: center;
      margin-bottom: 10px;
      z-index: 10;
    }

    .flipbook .hard .title3 {
      position: absolute;
      top: 55%;
      left: 0;
      right: 0;
      text-align: center;
      margin-bottom: 160px;
      z-index: 10;
    }

    .flipbook .hard small {
      font-style: italic;
      font-weight: lighter;
      opacity: 0.7;
      font-size: 14px;
    }

    /* Regular pages */
    .flipbook .page {
      background-image: url("/images/page.png");
      background-size: cover;
      background-position: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 10px;
      border: 1px solid rgba(0, 0, 0, 0.11);
      padding: 20px;
    }

    .page img {
      width: 70%;
      object-fit: cover;
      margin: auto;
    }

    .page small {
      font-size: 14px;
      margin-bottom: 10px;
    }

    /* Controls */
    .controls {
      position: fixed;
      bottom: 20px;
      left: 0;
      right: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 15px;
      z-index: 100;
      background-color: rgba(255, 255, 255, 0.7);
      padding: 10px;
      border-radius: 30px;
      width: fit-content;
      margin: 0 auto;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .control-button {
      background: rgba(255, 255, 255, 0.8);
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: background 0.3s;
      font-size: 18px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .control-button:hover {
      background: rgba(255, 255, 255, 1);
    }

    .control-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .page-info {
      font-size: 16px;
      font-weight: 500;
      color: #333;
      margin: 0 10px;
    }

    .zoom-controls {
      display: flex;
      gap: 10px;
      margin-left: 15px;
    }

    .separator {
      width: 1px;
      height: 30px;
      background-color: #ccc;
      margin: 0 5px;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
      .controls {
        flex-wrap: wrap;
        padding: 8px;
      }
      
      .control-button {
        width: 36px;
        height: 36px;
        font-size: 16px;
      }
      
      .page-info {
        font-size: 14px;
      }
    }

    @media (max-width: 480px) {
      .controls {
        bottom: 10px;
        gap: 8px;
      }
      
      .control-button {
        width: 32px;
        height: 32px;
        font-size: 14px;
      }
      
      .separator {
        height: 24px;
      }
    }
  </style>
</head>
<body>
  <div class="flipbook-wrapper">
    <div class="zoom-container">
      <div class="flipbook">
        <!-- Your flipbook pages will be here -->
      </div>
    </div>
    
    <div class="controls">
      <button class="control-button prev-button" title="Previous page">&#8592;</button>
      <div class="page-info">
        <span class="current-page">1</span> / <span class="total-pages">0</span>
      </div>
      <button class="control-button next-button" title="Next page">&#8594;</button>
      
      <div class="separator"></div>
      
      <div class="zoom-controls">
        <button class="control-button zoom-out-button" title="Zoom out">&#8722;</button>
        <button class="control-button reset-zoom-button" title="Reset zoom">&#8634;</button>
        <button class="control-button zoom-in-button" title="Zoom in">&#43;</button>
      </div>
    </div>
  </div>

  <script src="/jquery.js"></script>
  <script src="/turn.js"></script>
  <script>
    $(document).ready(function() {
      // Book dimensions
      const baseWidth = 800;
      const baseHeight = 600;
      
      // Zoom settings
      let currentZoom = 1;
      const zoomStep = 0.25;
      const minZoom = 0.5;
      const maxZoom = 2.5;
      let isDragging = false;
      let dragStartX, dragStartY;
      let containerX = 0;
      let containerY = 0;
      
      // DOM elements
      const flipbookWrapper = $('.flipbook-wrapper');
      const zoomContainer = $('.zoom-container');
      const flipbook = $('.flipbook');
      const prevButton = $('.prev-button');
      const nextButton = $('.next-button');
      const zoomInButton = $('.zoom-in-button');
      const zoomOutButton = $('.zoom-out-button');
      const resetZoomButton = $('.reset-zoom-button');
      const currentPageEl = $('.current-page');
      const totalPagesEl = $('.total-pages');
      
      // Initialize the flipbook
      function loadFlipbook() {
        // Add your pages to the flipbook
        flipbook.html(`
          <div class="hard">
            <img src="/images/outer.jpeg" alt="Cover" style="width:100%; height:100%; position:absolute;">
            <h3 id="hare">हरे कृष्ण</h3>
            <h1 class="title1">श्रीमद्भगवद्गीता</h1>
            <div id="chapter">अध्याय 3</div>
            <h1 class="title2">|| कर्मयोग ||</h1>
            <h1 class="title3">Karma Yoga</h1>
          </div>
          <div class="hard">
            <img src="/images/inner.png" alt="Inside Cover" style="width:100%; height:100%; position:absolute;">
          </div>
          <div class="page">
            <h2>Chapter 1</h2>
            <p>The content of your book goes here...</p>
          </div>
          <div class="page">
            <h2>Chapter 2</h2>
            <p>More content goes here...</p>
          </div>
          <div class="page">
            <h2>Chapter 3</h2>
            <p>Even more content goes here...</p>
          </div>
          <div class="page">
            <h2>Chapter 4</h2>
            <p>The journey continues...</p>
          </div>
          <div class="page">
            <h2>Chapter 5</h2>
            <p>More wisdom to share...</p>
          </div>
          <div class="hard"></div>
          <div class="hard"></div>
        `);
        
        // Initialize turn.js
        flipbook.turn({
          width: baseWidth,
          height: baseHeight,
          autoCenter: true,
          display: window.innerWidth < 768 ? 'single' : 'double',
          acceleration: true,
          elevation: 50,
          gradients: true,
          when: {
            turning: function(e, page, view) {
              // Update page info
              currentPageEl.text(page);
            },
            turned: function(e, page, view) {
              // Update button states
              updateButtonStates(page);
            }
          }
        });
        
        // Set total pages
        const totalPages = flipbook.turn('pages');
        totalPagesEl.text(totalPages);
        
        // Initialize current page
        currentPageEl.text(flipbook.turn('page'));
        updateButtonStates(flipbook.turn('page'));
      }
      
      // Update button states based on current page
      function updateButtonStates(page) {
        const totalPages = flipbook.turn('pages');
        
        prevButton.prop('disabled', page <= 1);
        nextButton.prop('disabled', page >= totalPages);
        
        // Update zoom buttons based on current zoom
        zoomOutButton.prop('disabled', currentZoom <= minZoom);
        zoomInButton.prop('disabled', currentZoom >= maxZoom);
      }
      
      // Apply zoom to the container
      function applyZoom() {
        zoomContainer.css({
          'transform': `translate(${containerX}px, ${containerY}px) scale(${currentZoom})`
        });
        
        // Update zoom button states
        zoomOutButton.prop('disabled', currentZoom <= minZoom);
        zoomInButton.prop('disabled', currentZoom >= maxZoom);
      }
      
      // Reset zoom and position
      function resetZoom() {
        currentZoom = 1;
        containerX = 0;
        containerY = 0;
        applyZoom();
      }
      
      // Initialize the flipbook
      loadFlipbook();
      
      // Navigation button event listeners
      prevButton.on('click', function() {
        flipbook.turn('previous');
      });
      
      nextButton.on('click', function() {
        flipbook.turn('next');
      });
      
      // Zoom button event listeners
      zoomInButton.on('click', function() {
        if (currentZoom < maxZoom) {
          currentZoom += zoomStep;
          applyZoom();
        }
      });
      
      zoomOutButton.on('click', function() {
        if (currentZoom > minZoom) {
          currentZoom -= zoomStep;
          applyZoom();
        }
      });
      
      resetZoomButton.on('click', resetZoom);
      
      // Keyboard navigation
      $(document).keydown(function(e) {
        switch(e.which) {
          case 37: // left arrow
            flipbook.turn('previous');
            break;
          case 39: // right arrow
            flipbook.turn('next');
            break;
          case 107: // plus key
          case 187: // plus key (with shift)
            if (currentZoom < maxZoom) {
              currentZoom += zoomStep;
              applyZoom();
            }
            break;
          case 109: // minus key
          case 189: // minus key (with shift)
            if (currentZoom > minZoom) {
              currentZoom -= zoomStep;
              applyZoom();
            }
            break;
          case 48: // 0 key
          case 96: // numpad 0
            resetZoom();
            break;
          default: return;
        }
        e.preventDefault();
      });
      
      // Mouse wheel zoom
      flipbookWrapper.on('wheel', function(e) {
        if (e.originalEvent.ctrlKey) {
          e.preventDefault();
          if (e.originalEvent.deltaY < 0 && currentZoom < maxZoom) {
            currentZoom += zoomStep;
            applyZoom();
          } else if (e.originalEvent.deltaY > 0 && currentZoom > minZoom) {
            currentZoom -= zoomStep;
            applyZoom();
          }
        }
      });
      
      // Drag functionality for panning when zoomed
      zoomContainer.on('mousedown', function(e) {
        if (currentZoom > 1) {
          isDragging = true;
          dragStartX = e.clientX - containerX;
          dragStartY = e.clientY - containerY;
          zoomContainer.css('cursor', 'grabbing');
        }
      });
      
      $(document).on('mousemove', function(e) {
        if (isDragging) {
          containerX = e.clientX - dragStartX;
          containerY = e.clientY - dragStartY;
          applyZoom();
        }
      });
      
      $(document).on('mouseup', function() {
        if (isDragging) {
          isDragging = false;
          zoomContainer.css('cursor', 'grab');
        }
      });
      
      // Touch events for mobile
      let touchStartX, touchStartY;
      
      zoomContainer.on('touchstart', function(e) {
        if (currentZoom > 1 && e.touches.length === 1) {
          isDragging = true;
          touchStartX = e.touches[0].clientX - containerX;
          touchStartY = e.touches[0].clientY - containerY;
        }
      });
      
      zoomContainer.on('touchmove', function(e) {
        if (isDragging && e.touches.length === 1) {
          containerX = e.touches[0].clientX - touchStartX;
          containerY = e.touches[0].clientY - touchStartY;
          applyZoom();
          e.preventDefault();
        }
      });
      
      zoomContainer.on('touchend', function() {
        isDragging = false;
      });
      
      // Pinch to zoom for mobile
      let initialDistance = 0;
      let initialZoom = 1;
      
      zoomContainer.on('touchstart', function(e) {
        if (e.touches.length === 2) {
          initialDistance = Math.hypot(
            e.touches[0].clientX - e.touches[1].clientX,
            e.touches[0].clientY - e.touches[1].clientY
          );
          initialZoom = currentZoom;
        }
      });
      
      zoomContainer.on('touchmove', function(e) {
        if (e.touches.length === 2) {
          const currentDistance = Math.hypot(
            e.touches[0].clientX - e.touches[1].clientX,
            e.touches[0].clientY - e.touches[1].clientY
          );
          
          const scale = currentDistance / initialDistance;
          currentZoom = Math.min(Math.max(initialZoom * scale, minZoom), maxZoom);
          
          applyZoom();
          e.preventDefault();
        }
      });
      
      // Window resize handler
      $(window).resize(function() {
        // Adjust display mode based on window width
        if (window.innerWidth < 768) {
          flipbook.turn('display', 'single');
        } else {
          flipbook.turn('display', 'double');
        }
        
        // Reset zoom when window is resized
        resetZoom();
      });
    });
  </script>
</body>
</html>

